<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>

    <%- include('style_form') %>

  </head>
  <body>
    <section class="background-radial-gradient">

      <div class="vertical-center">
        <div class="container px-4 py-5 px-md-5 text-center text-lg-start">
          <div class="col-lg-12 d-flex justify-content-center">
            <a href="/signup" class="back-square btn btn-lg mb-4">Go back</a>
          </div>
          <div class="col-lg-12 d-flex justify-content-center">
            <div class="card bg-glass">
              <div class="card-body px-4 py-5 px-md-5">


                <form action="/signup/verify" method="POST">

                  <%- include('_otp_fields') %>
                  
                </form>


                <div class="content d-flex justify-content-center align-items-center">
                  <span>Didn't get the code</span>
                  <a href="#" class="text-decoration-none ms-3" style="color: #88742b; text-decoration: none;" disabled >Resend</a>
                </div>
                <p><span id="countdown">2:00</span> remaining</p> 
              </div>
            </div>
          </div>
        </div>
      </div>

    </section>


    <script>

const countdownElement = document.getElementById('countdown');
const resendButton = document.querySelector('.text-decoration-none'); // Assuming the class is unique

let countdown = 60; // Initial countdown time in seconds

function updateCountdown() {
    const minutes = Math.floor(countdown / 60);
    const seconds = countdown % 60;
    const formattedTime = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    countdownElement.textContent = formattedTime;
}

// Update the countdown every second
const countdownInterval = setInterval(() => {
    countdown--;
    updateCountdown();

    // Enable the Resend button when the countdown reaches 0
    if (countdown <= 0) {
        clearInterval(countdownInterval); // Stop the countdown
        resendButton.removeAttribute('disabled'); // Enable the Resend button
    }
}, 1000); // Update every 1 second (1000 milliseconds)


    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <script type="text/javascript">
      $(function () {
        $('[data-toggle="tooltip"]').tooltip();
      });

      document.addEventListener("DOMContentLoaded", function (event) {
        function OTPInput() {
          const inputs = document.querySelectorAll("#otp > *[id]");
          for (let i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener("keydown", function (event) {
              if (event.key === "Backspace") {
                inputs[i].value = "";
                if (i !== 0) inputs[i - 1].focus();
              } else {
                if (i === inputs.length - 1 && inputs[i].value !== "") {
                  return true;
                } else if (event.keyCode > 47 && event.keyCode < 58) {
                  inputs[i].value = event.key;
                  if (i !== inputs.length - 1) inputs[i + 1].focus();
                  event.preventDefault();
                } else if (event.keyCode > 64 && event.keyCode < 91) {
                  inputs[i].value = String.fromCharCode(event.keyCode);
                  if (i !== inputs.length - 1) inputs[i + 1].focus();
                  event.preventDefault();
                }
              }
            });
          }
        }
        OTPInput();
      });
    </script>
    <script type="text/javascript">
      $(function () {
        $('[data-toggle="tooltip"]').tooltip();
      });
    
      document.addEventListener("DOMContentLoaded", function (event) {
        function OTPInput() {
          const inputs = document.querySelectorAll("#otp > *[id]");
          for (let i = 0; i < inputs.length; i++) {
            inputs[i].addEventListener("keydown", function (event) {
              // Rest of your existing keydown handling code ...
    
              // Concatenate the OTP input values and set as the value of the hidden input field
              const otpInput = Array.from(inputs)
                .map((input) => input.value)
                .join("");
              document.getElementById("otpInput").value = otpInput;
            });
          }
        }
        OTPInput();
      });
    </script>
  </body>
</html>
